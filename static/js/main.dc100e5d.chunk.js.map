{"version":3,"sources":["actions/index.js","reducers/todos.js","reducers/visibilityFilter.js","reducers/postsBySubreddit.js","reducers/selectedSubreddit.js","reducers/index.js","components/NavBar.jsx","components/Link.js","containers/FilterLink.js","components/Footer.js","containers/AddTodo.js","containers/RemoveTodo.js","components/Todo.js","components/TodoList.js","containers/VisibleTodoList.js","components/Picker.js","components/Posts.js","containers/AsyncApp.js","components/Home.jsx","components/About.jsx","components/Contact.jsx","App.js","serviceWorker.js","index.js"],"names":["nextTodoId","VisibilityFilters","SELECT_SUBREDDIT","selectSubreddit","subreddit","type","INVALIDATE_SUBREDDIT","REQUEST_POSTS","RECEIVE_POSTS","fetchPosts","dispatch","requestPosts","fetch","concat","then","response","json","error","console","log","posts","data","children","map","child","receivedAt","Date","now","receivePosts","fetchPostsIfNeeded","getState","state","postsBySubreddit","isFetching","didInvalidate","shouldFetchPosts","Promise","resolve","todos","arguments","length","undefined","action","Object","toConsumableArray","id","text","completed","todo","objectSpread","filter","visibilityFilter","defineProperty","items","lastUpdated","selectedSubreddit","combineReducers","NavBar","react_default","a","createElement","className","href","style","top","paddingTop","Link","_ref","active","onClick","disabled","marginLeft","connect","ownProps","Footer","FilterLink","input","onSubmit","e","preventDefault","value","trim","ref","node","RemoveTodo","removeTodo","class","Todo","containers_RemoveTodo","TodoList","toggleTodo","components_Todo","assign","key","t","Error","getVisibleTodos","Picker","_this$props","this","props","onChange","options","target","option","Component","Posts","post","i","title","AsyncApp","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","bind","assertThisInitialized","handleRefreshClick","prevProps","_this$props2","nextSubreddit","_this$props3","_this$props4","Picker_Picker","toLocaleTimeString","opacity","Posts_Posts","Home","containers_AddTodo","VisibleTodoList","components_Footer","containers_AsyncApp","About","Contact","middleware","thunk","logger","store","createStore","rootReducer","applyMiddleware","apply","App","process","es","BrowserRouter","components_NavBar","Route","exact","path","render","routerProps","components_Home","component","Boolean","window","location","hostname","match","ReactDOM","basename","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dc100e5d.chunk.js","sourcesContent":["import fetch from 'cross-fetch'\nimport { ADD_TODO, TOGGLE_TODO, REMOVE_TODO } from './actionTypes';\n// import * as actionCreators from '../actions'\nlet nextTodoId = 0\nexport const addTodo = text => ({\n  type: 'ADD_TODO',\n  id: nextTodoId++,\n  text\n})\n\nexport const setVisibilityFilter = filter => ({\n  type: 'SET_VISIBILITY_FILTER',\n  filter\n})\n\n// export const REMOVE_TODO = 'REMOVE_TODO'\n// export function removeTodo(id) {\n//   return {\n//     type: 'REMOVE_TODO',\n//     id\n//   }\n// }\nexport const removeTodo = id => {\n  return {\n    type: 'REMOVE_TODO',\n    id: id\n  }\n}\n\nexport const toggleTodo = id => ({\n  type: 'TOGGLE_TODO',\n  id\n})\n\nexport const VisibilityFilters = {\n  SHOW_ALL: 'SHOW_ALL',\n  SHOW_COMPLETED: 'SHOW_COMPLETED',\n  SHOW_ACTIVE: 'SHOW_ACTIVE'\n}\n\nexport const SELECT_SUBREDDIT = 'SELECT_SUBREDDIT'\nexport function selectSubreddit(subreddit) {\n  return {\n    type: SELECT_SUBREDDIT,\n    subreddit\n  }\n}\nexport const INVALIDATE_SUBREDDIT = 'INVALIDATE_SUBREDDIT'\nexport function invalidateSubreddit(subreddit) {\n  return {\n    type: INVALIDATE_SUBREDDIT,\n    subreddit\n  }\n}\n// network requests\nexport const REQUEST_POSTS = 'REQUEST_POSTS'\nfunction requestPosts(subreddit) {\n  return {\n    type: REQUEST_POSTS,\n    subreddit\n  }\n}\nexport const RECEIVE_POSTS = 'RECEIVE_POSTS'\n\nfunction receivePosts(subreddit, json) {\n  return {\n    type: RECEIVE_POSTS,\n    subreddit,\n    posts: json.data.children.map(child => child.data),\n    receivedAt: Date.now()\n  }\n}\n// https://redux.js.org/introduction/examples#real-world  error handling\n\n//  thunk action creator! Though its insides are different,\n//  you would use it just like any other action creator:\n// store.dispatch(fetchPosts('reactjs'))\nexport function fetchPosts(subreddit) {\n  // Thunk middleware knows how to handle functions.\n  // It passes the dispatch method as an argument to the function,\n  // thus making it able to dispatch actions itself.\n\n  return function(dispatch) {\n    // First dispatch: the app state is updated to inform\n    // that the API call is starting.\n    dispatch(requestPosts(subreddit))\n    // The function called by the thunk middleware can return a value,\n    // that is passed on as the return value of the dispatch method.\n    // In this case, we return a promise to wait for.\n    // This is not required by thunk middleware, but it is convenient for us.\n    return fetch(`https://www.reddit.com/r/${subreddit}.json`)\n      .then(\n        response => response.json(),\n        // Do not use catch, because that will also catch\n        // any errors in the dispatch and resulting render,\n        // causing a loop of 'Unexpected batch number' errors.\n        // https://github.com/facebook/react/issues/6895\n        error => console.log('An error occurred.', error)\n      )\n      .then(json =>\n        // We can dispatch many times!\n        // Here, we update the app state with the results of the API call.\n        dispatch(receivePosts(subreddit, json))\n      )\n  }\n}\n\nfunction shouldFetchPosts(state, subreddit) {\n  const posts = state.postsBySubreddit[subreddit]\n  if (!posts) {\n    return true\n  } else if (posts.isFetching) {\n    return false\n  } else {\n    return posts.didInvalidate\n  }\n}\n\nexport function fetchPostsIfNeeded(subreddit) {\n  // Note that the function also receives getState()\n  // which lets you choose what to dispatch next.\n  // This is useful for avoiding a network request if\n  // a cached value is already available.\n  return (dispatch, getState) => {\n    if (shouldFetchPosts(getState(), subreddit)) {\n      // Dispatch a thunk from thunk!\n      return dispatch(fetchPosts(subreddit))\n    } else {\n      // Let the calling code know there's nothing to wait for.\n      return Promise.resolve()\n    }\n  }\n}","import { ADD_TODO, TOGGLE_TODO, REMOVE_TODO} from '../actions/actionTypes';\n// import * as actionCreators from '../actions'\nconst todos = (state = [], action) => {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return [\n        ...state,\n        {\n          id: action.id,\n          text: action.text,\n          completed: false\n        }\n      ]\n    case 'TOGGLE_TODO':\n      return state.map(\n        todo =>\n          todo.id === action.id ? { ...todo, completed: !todo.completed } : todo\n      )\n    case 'REMOVE_TODO':\n    return state.filter(todo => todo.id !== action.id);\n    //   const todos = this.state.todos.filter(todo => {\n    //    return todo.id !== id\n    //  });\n    default:\n      return state\n  }\n}\n\nexport default todos","import { VisibilityFilters } from '../actions'\n\nconst visibilityFilter = (state = VisibilityFilters.SHOW_ALL, action) => {\n  switch (action.type) {\n    case 'SET_VISIBILITY_FILTER':\n      return action.filter\n    default:\n      return state\n  }\n}\n\nexport default visibilityFilter","import {\n  INVALIDATE_SUBREDDIT,\n  REQUEST_POSTS,\n  RECEIVE_POSTS\n} from '../actions'\n\nfunction posts(\n  state = {\n    isFetching: false,\n    didInvalidate: false,\n    items: []\n  },\n  action\n) {\n  switch (action.type) {\n    case INVALIDATE_SUBREDDIT:\n      // return Object.assign({}, state, {\n      //   didInvalidate: true\n      // })\n      return {...state, didInvalidate: true}\n    case REQUEST_POSTS:\n      // return Object.assign({}, state, {\n      //   isFetching: true,\n      //   didInvalidate: false\n      // })\n      return {\n        ...state,\n        isFetching: true,\n        didInvalidate: false\n      }\n    case RECEIVE_POSTS:\n      return  {...state,\n        isFetching: false,\n        didInvalidate: false,\n        items: action.posts,\n        lastUpdated: action.receivedAt\n      }\n    default:\n      return state\n  }\n}\n\nfunction postsBySubreddit(state = {}, action) {\n  switch (action.type) {\n    case INVALIDATE_SUBREDDIT:\n    case RECEIVE_POSTS:\n    case REQUEST_POSTS:\n      return {...state,\n        [action.subreddit]: posts(state[action.subreddit], action)\n      }\n    default:\n      return state\n  }\n}\n// is equivalent to this:\n// let nextState = {}\n// nextState[action.subreddit] = posts(state[action.subreddit], action)\n// return Object.assign({}, state, nextState)\n\nexport default postsBySubreddit\n\n// We extracted posts(state, action) that manages the state of a specific post list.\n// This is just reducer composition! It is our choice how to split the reducer into smaller reducers, and in this case,\n// we're delegating updating items inside an object to a posts reducer. The real world example goes even further,\n// showing how to create a reducer factory for parameterized pagination reducers.\n\n// Remember that reducers are just functions, so you can use functional composition and higher-order functions\n// as much as you feel comfortable.","import { SELECT_SUBREDDIT } from '../actions'\n\n\nfunction selectedSubreddit(state = 'reactjs', action) {\n  switch (action.type) {\n    case SELECT_SUBREDDIT:\n      return action.subreddit\n    default:\n      return state\n  }\n}\n\nexport default selectedSubreddit","\nimport { combineReducers } from 'redux'\nimport todos from './todos'\nimport visibilityFilter from './visibilityFilter'\nimport postsBySubreddit from './postsBySubreddit'\nimport selectedSubreddit from './selectedSubreddit'\n\nexport default combineReducers({\n  todos,\n  visibilityFilter,\n  postsBySubreddit,\n  selectedSubreddit\n})","import React from \"react\";\n// import logo from \"../images/logo3.png\";\n\nconst NavBar = () => {\n  return (\n    <nav className=\"nav-wrapper blue darken-1\">\n      <div className=\"container\">\n        <a\n          href=\"/\"\n          className=\"brand-logo left\"\n          style={{ top: 0, paddingTop: 0 }}\n        >\n          Shopwiz.net\n          {/* <img src={logo} alt=\"logo\" style={{height:60, width: 160, paddingTop:12}} /> */}\n        </a>\n        <ul className=\"right\">\n          <li>\n            <a href=\"/\">Home</a>\n          </li>\n          <li>\n            {\" \"}\n            <a href=\"/contact\">Contact</a>\n          </li>\n          <li>\n            {\" \"}\n            <a href=\"/about\">About</a>\n          </li>\n        </ul>\n      </div>\n    </nav>\n  );\n};\n\nexport default NavBar;\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Link = ({ active, children, onClick }) => (\n    <button className=\"input-field col s6  blue-text\"\n       onClick={onClick}\n       disabled={active}\n       style={{\n           marginLeft: '4px',\n       }}\n    >\n      {children}\n    </button>\n)\n\nLink.propTypes = {\n  active: PropTypes.bool.isRequired,\n  children: PropTypes.node.isRequired,\n  onClick: PropTypes.func.isRequired\n}\n\nexport default Link","import { connect } from 'react-redux'\nimport { setVisibilityFilter } from '../actions'\nimport Link from '../components/Link'\n\nconst mapStateToProps = (state, ownProps) => ({\n  active: ownProps.filter === state.visibilityFilter\n})\n  // own props not child returned props\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  onClick: () => dispatch(setVisibilityFilter(ownProps.filter))\n})\n\n// function mapDispatchToProps(dispatch) {\n//   return bindActionCreators(actionCreators, dispatch)\n// }\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Link)","import React from 'react'\nimport FilterLink from '../containers/FilterLink'\nimport { VisibilityFilters } from '../actions'\n\nconst Footer = () => (\n  <div className=\"container\">\n    <span>Show: </span>\n    <FilterLink filter={VisibilityFilters.SHOW_ALL}>\n      All\n    </FilterLink>\n    <FilterLink filter={VisibilityFilters.SHOW_ACTIVE}>\n      Active\n    </FilterLink>\n    <FilterLink filter={VisibilityFilters.SHOW_COMPLETED}>\n      Completed\n    </FilterLink>\n  </div>\n)\n\nexport default Footer","import React from 'react'\nimport { connect } from 'react-redux'\nimport { addTodo } from '../actions'\n// import * as actionCreators from '../actions'\nconst AddTodo = ({ dispatch }) => {\n  let input\n\n  return (\n    <div className=\"container\">\n\n      <form onSubmit={e => {\n        e.preventDefault()\n        if (!input.value.trim()) {\n          return\n        }\n        dispatch(addTodo(input.value))\n        input.value = ''\n      }}>\n        <input type=\"text\" className=\"input-field col s6\" ref={node => input = node} />\n        <button type=\"submit\"  className=\"waves-effect waves-light btn blue\">\n          Add Todo\n        </button>\n      </form>\n    </div>\n  )\n}\n\nexport default connect()(AddTodo)","import React from 'react'\nimport {connect} from 'react-redux'\nimport {removeTodo} from '../actions'\n\nlet RemoveTodo = ({id, dispatch}) => {\n  return (\n      <div className=\"center\">\n        <button type=\"submit\"  className=\"waves-effect waves-light btn-small red\"   onClick={e => {\n          e.preventDefault()\n           dispatch(removeTodo(id))\n          // console.log(dispatch(removeTodo(id)));\n        }}>  Remove item  <i class=\"material-icons\"> delete </i>  </button>\n      </div>\n  )\n}\n\nRemoveTodo = connect()(RemoveTodo)\n\nexport default RemoveTodo","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {connect} from 'react-redux'\nimport RemoveTodo from '../containers/RemoveTodo'\n\nconst done = 'Finished';\nconst Todo = ({ onClick, completed, text, id }) => (\n  <li className=\"collection \"\n    onClick={onClick}\n\n\n\n  // style={{\n  //   textDecoration: completed ? 'line-through' : 'none'\n  // }}\n  ><i class=\"material-icons \">developer_board</i>\n    <span className=\"collection-item\">{text} {completed ? <i class=\"collection-item  material-icons\"> check </i> : null}</span>\n    <span class=\"secondary-content\">\n      <RemoveTodo id={id} />\n    </span>\n\n  </li>\n  //   {text}\n  // </li>\n)\n\nTodo.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  completed: PropTypes.bool.isRequired,\n  text: PropTypes.string.isRequired\n}\n\nexport default Todo","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Todo from './Todo'\n\nconst TodoList = ({ todos, toggleTodo }) => (\n  <ul>\n    {todos.map(todo =>\n      <Todo\n        key={todo.id}\n        {...todo}\n        onClick={() => toggleTodo(todo.id)}\n      />\n    )}\n  </ul>\n)\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    completed: PropTypes.bool.isRequired,\n    text: PropTypes.string.isRequired\n  }).isRequired).isRequired,\n  toggleTodo: PropTypes.func.isRequired\n}\n\nexport default TodoList","import { connect } from 'react-redux'\nimport { toggleTodo } from '../actions'\nimport TodoList from '../components/TodoList'\nimport { VisibilityFilters } from '../actions'\n\nconst getVisibleTodos = (todos, filter) => {\n  switch (filter) {\n    case VisibilityFilters.SHOW_ALL:\n      return todos\n    case VisibilityFilters.SHOW_COMPLETED:\n      return todos.filter(t => t.completed)\n    case VisibilityFilters.SHOW_ACTIVE:\n      return todos.filter(t => !t.completed)\n    default:\n      throw new Error('Unknown filter: ' + filter)\n  }\n}\n\nconst mapStateToProps = state => ({\n  todos: getVisibleTodos(state.todos, state.visibilityFilter)\n})\n\nconst mapDispatchToProps = dispatch => ({\n  toggleTodo: id => dispatch(toggleTodo(id))\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TodoList)","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nexport default class Picker extends Component {\n  render() {\n    const { value, onChange, options } = this.props\n\n    return (\n      <span>\n        <h1>{value}</h1>\n        <select onChange={e => onChange(e.target.value)} value={value}>\n          {options.map(option => (\n            <option value={option} key={option}>\n              {option}\n            </option>\n          ))}\n        </select>\n      </span>\n    )\n  }\n}\n\nPicker.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired\n}","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nexport default class Posts extends Component {\n  render() {\n    return (\n      <ul>\n        {this.props.posts.map((post, i) => (\n          <li key={i}>{post.title}</li>\n        ))}\n      </ul>\n    )\n  }\n}\n\nPosts.propTypes = {\n  posts: PropTypes.array.isRequired\n}","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport {\n  selectSubreddit,\n  fetchPostsIfNeeded,\n  invalidateSubreddit\n} from '../actions'\nimport Picker from '../components/Picker'\nimport Posts from '../components/Posts'\n\nclass AsyncApp extends Component {\n  constructor(props) {\n    super(props)\n    this.handleChange = this.handleChange.bind(this)\n    this.handleRefreshClick = this.handleRefreshClick.bind(this)\n  }\n\n  componentDidMount() {\n    const { dispatch, selectedSubreddit } = this.props\n    dispatch(fetchPostsIfNeeded(selectedSubreddit))\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.selectedSubreddit !== prevProps.selectedSubreddit) {\n      const { dispatch, selectedSubreddit } = this.props\n      dispatch(fetchPostsIfNeeded(selectedSubreddit))\n    }\n  }\n\n  handleChange(nextSubreddit) {\n    this.props.dispatch(selectSubreddit(nextSubreddit))\n    this.props.dispatch(fetchPostsIfNeeded(nextSubreddit))\n  }\n\n  handleRefreshClick(e) {\n    e.preventDefault()\n\n    const { dispatch, selectedSubreddit } = this.props\n    dispatch(invalidateSubreddit(selectedSubreddit))\n    dispatch(fetchPostsIfNeeded(selectedSubreddit))\n  }\n\n  render() {\n    const { selectedSubreddit, posts, isFetching, lastUpdated } = this.props\n    return (\n      <div>\n        <Picker\n          value={selectedSubreddit}\n          onChange={this.handleChange}\n          options={['reactjs', 'frontend']}\n        />\n        <p>\n          {lastUpdated && (\n            <span>\n              Last updated at {new Date(lastUpdated).toLocaleTimeString()}.{' '}\n            </span>\n          )}\n          {!isFetching && (\n            <button onClick={this.handleRefreshClick}>Refresh</button>\n          )}\n        </p>\n        {isFetching && posts.length === 0 && <h2>Loading...</h2>}\n        {!isFetching && posts.length === 0 && <h2>Empty.</h2>}\n        {posts.length > 0 && (\n          <div style={{ opacity: isFetching ? 0.5 : 1 }}>\n            <Posts posts={posts} />\n          </div>\n        )}\n      </div>\n    )\n  }\n}\n\nAsyncApp.propTypes = {\n  selectedSubreddit: PropTypes.string.isRequired,\n  posts: PropTypes.array.isRequired,\n  isFetching: PropTypes.bool.isRequired,\n  lastUpdated: PropTypes.number,\n  dispatch: PropTypes.func.isRequired\n}\n\nfunction mapStateToProps(state) {\n  const { selectedSubreddit, postsBySubreddit } = state\n  const { isFetching, lastUpdated, items: posts } = postsBySubreddit[\n    selectedSubreddit\n  ] || {\n    isFetching: true,\n    items: []\n  }\n\n  return {\n    selectedSubreddit,\n    posts,\n    isFetching,\n    lastUpdated\n  }\n}\n\nexport default connect(mapStateToProps)(AsyncApp)","import React from 'react'\nimport Footer from './Footer'\nimport AddTodo from '../containers/AddTodo'\nimport VisibleTodoList from '../containers/VisibleTodoList'\nimport AsyncApp from '../containers/AsyncApp'\n\nconst Home = () => {\n  return (\n    <div>\n      <div className=\"container\">\n        <h3 className=\"center\">Home</h3>\n        <h4 className=\"center blue-text\">Todos</h4>\n        <AddTodo />\n        <VisibleTodoList />\n        <Footer />\n        <AsyncApp />\n      </div>\n    </div>\n  )\n}\n\nexport default Home\n","import React from 'react'\n\nconst About = () => {\n  return (\n    <div>\n      <div className=\"container\">\n      <h4 className=\"center\">About</h4>\n      </div>\n\n    </div>\n  )\n}\n\nexport default About","import React from 'react'\n\nconst Contact = () => {\n  return (\n    <div>\n      <div className=\"container\">\n      <h4 className=\"center\">Contact</h4>\n      </div>\n\n    </div>\n  )\n}\n\nexport default Contact ","// import 'babel-polyfill'\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\n// import { render } from 'react-dom'\nimport { selectSubreddit, fetchPosts } from './actions'\nimport { createStore, applyMiddleware } from 'redux'\nimport { Provider } from 'react-redux'\nimport thunk from 'redux-thunk'\nimport rootReducer from './reducers'\nimport NavBar from './components/NavBar'\nimport {BrowserRouter, Route} from 'react-router-dom'\nimport Home from './components/Home'\nimport About from './components/About'\nimport Contact from './components/Contact'\nimport logger from 'redux-logger'\nconst initialState = {};\nconst middleware = [thunk, logger];\nconst store = createStore(rootReducer, initialState, applyMiddleware(...middleware));\n\nclass App extends Component {\n\n  render() {\n    console.log(\"This is the process.env\", process.env.PUBLIC_URL)\n    return (\n      <Provider store={store}>\n      <BrowserRouter>\n        <div className=\"App\">\n            <NavBar />\n            <Route exact path={`/`} render={ (routerProps) => < Home routerProps={routerProps}  />} />\n            {/* <Route  exact  path='/' component={Home} /> */}\n           <Route  path='/contact' component={Contact} />\n           <Route  path='/about' component={About} />\n\n           {/* <h1 className=\"center blue-text\">Todos</h1>\n          <Todos todos={this.state.todos} deleteTodo={this.deleteTodo} />\n          <AddTodo addTodo={this.addTodo} /> */}\n        </div>\n        </BrowserRouter>\n        </Provider>\n    );\n  }\n}\n// The nice thing about thunks is that they can dispatch results of each other:\nstore.dispatch(selectSubreddit('reactjs'))\nstore.dispatch(fetchPosts('reactjs')).then(() => console.log(store.getState()))\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router} from 'react-router-dom'\n\nReactDOM.render(<Router basename={process.env.PUBLIC_URL}><App /></Router>,  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}